from pathlib import Path
import argparse
from lxml import etree
import subprocess

def render_and_clean_lyrics(type, jazz_style_path, style, musescore_exe, input, output):
    input = Path(input)
    output = Path(output)
    musescore_exe = Path(musescore_exe)
    jazz_style_path = Path(jazz_style_path)

    assert input.exists(), "Input file does not exist."
    assert musescore_exe.exists(), f"MuseScore executable does not exist at location {musescore_exe}."

    if type == "verovio":
        raise NotImplementedError("Verovio rendering is not yet implemented.")
    elif type == "musescore":
        # render from command line
        cmd = [
            str(musescore_exe),
            "-o", str(output),
            str(input)
        ]
        if style=="jazz":
            assert jazz_style_path.exists()
            cmd.append("--style")
            cmd.append(str(jazz_style_path))
        print("Running command: ", cmd)
        subprocess.run(cmd)
        # for some unknown reasons, sometimes musescore save the svg not in the output file, but in a file {output.stem}-1.svg
        # if this is the case, rename the output file
        print("Looking for the output file", output)
        if not output.exists():
            new_output = output.parent / Path(output.stem + "-1.svg")
            # rename the output file
            new_output.rename(output)
        # remove lyrics
        remove_musescore_lyrics(output, output)       

def remove_verovio_lyrics(input_svg, output_svg):
    # Verovio svg contains lyrics in the verse element in the xml tree
    parser = etree.XMLParser(remove_blank_text=True)
    tree = etree.parse(input_svg, parser)
    root = tree.getroot()

    # Find all elements with an id attribute starting with "verse" and remove them
    for element in root.xpath('//*[@id]'):
        if element.get("id").startswith("verse"):
            parent = element.getparent()
            parent.remove(element)

    tree.write(output_svg, pretty_print=True, xml_declaration=True, encoding="UTF-8")

def remove_musescore_lyrics(input_svg, outputsvg):
    # Musescore svg is a line-by-line organized document. Lyrics are stored in the lines starting with <path class="Lyrics">
    # remove the lines
    with open(input_svg, "r") as f:
        lines = f.readlines()
    with open(outputsvg, "w") as f:
        for line in lines:
            if not line.startswith('<path class="Lyrics"') and not line.startswith('<polyline class="Lyrics'): 
                f.write(line)

def main():
    parser = argparse.ArgumentParser(
        description="Remove lyrics from an SVG file generated by Verovio or Musescore."
    )
    parser.add_argument(
        "--input",
        required=True,
        help="Path to the input XML file."
    )
    parser.add_argument(
        "--output",
        required=True,
        help="Path to the output SVG file."
    )
    parser.add_argument(
        "--render-type",
        type=str,
        choices=["verovio", "musescore"],
        default="musescore",
        help="Specify the tool: 'verovio' or 'musescore'."
    )
    parser.add_argument(
        "--musescore-path",
        help="Path to the MuseScore executable.",
        type=str,
        default=r"C:\Program Files\MuseScore 4\bin\MuseScore4.exe",
    )
    parser.add_argument(
        "--style",
        type=str,
        required=True,
        choices=["jazz", "classical"],
        help="Specify the tool: 'verovio' or 'musescore'."
    )
    parser.add_argument(
        "--musescore-jazz-style-path",
        help="Path to the MuseScore style file.",
        type=str,
        default=r"C:\Program Files\MuseScore 4\styles\MuseJazz.mss",
    )
    
    args = parser.parse_args()


    render_and_clean_lyrics(args.render_type, args.musescore_jazz_style_path, args.style, args.musescore_path, args.input, args.output)


if __name__ == "__main__":
    main()